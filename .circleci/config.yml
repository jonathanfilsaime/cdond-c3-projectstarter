version: 2.1

parameters:
  memstash_id:
    type: string
    default: 1477b7be-5924-46d9-9822-ee9e65df367e

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo $CIRCLE_WORKFLOW_ID
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID} --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: << pipeline.parameters.memstash_id >>" --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID}) 
            if(( $SUCCESS==true )); 
            then
            cd ~/project/backend
            npm install
            npm run migrations:revert
            else
            echo "curl command failed, you need to fix it"
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: cd frontend && npm install && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: cd backend && npm install && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: test front end 
          command: cd frontend && npm install && npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: [backend-test]
    - run:
        name: test backend
        command: cd backend && npm install && npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: [scan-frontend]
    - run:
        name: scan front end
        command: cd frontend && npm install && npm audit fix --audit-level=critical --force 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: [scan-backend]
    - run:
        name: scan back end
        command: cd backend && npm install && npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: deploy back end infra 
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --region us-east-1
      - run:
          name: deploy front end infra 
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --region us-east-1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend" \
            --output text) 
            echo $IP >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: << pipeline.parameters.memstash_id >>" \
            --request PUT \
            --data $IP \
            https://api.memstash.io/values/ip
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - revert-migrations
      - destroy-environment
    

  configure-infrastructure:
      docker:
        - image: circleci/python:latest
      steps:
        - checkout
        - attach_workspace:
            at: ~/project
        - add_ssh_keys:
            fingerprints: ["1b:44:51:30:00:83:58:cd:fd:f8:bf:c3:9f:f2:82:e2"]
        - run:
            name: Install Ansible 
            command: |
              python -m pip install ansible
        - run:
            name: Install dependencies
            command: |
              sudo apt-get install awscli
        - run:
            name: Set up inventory file
            command: |
              cd .circleci/ansible
              IPs=$(curl -H "token: << pipeline.parameters.memstash_id >>" --request GET https://api.memstash.io/values/ip)
              echo "$IPs" >> inventory.txt
              cat inventory.txt
        - run:
            name: Configure server with ansible
            no_output_timeout: 30m
            command: |
              echo ENVIRONMENT=production > "backend/.env"
              echo NODE_ENV=production >> "backend/.env"
              echo TYPEORM_CONNECTION=postgres >> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
        - revert-migrations
        - destroy-environment     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            npm i
            npm run migrations >> logs.txt
            status=$(grep -c "has been executed successfully" logs.txt)
            if [ $status -le 0 ]
            then
              echo "bad failed"
              exit 1
            fi
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: save migration results to memstash
          command: |
            cd backend
            echo "migration SUCCESS"
            curl -H "Content-Type: text/plain" -H "token: << pipeline.parameters.memstash_id >>" --request PUT --data "true" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Install aws-cli
          when: on_fail
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - revert-migrations
      - destroy-environment       

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout   
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd frontend && npm install
      - run:
          name: Get backend url
          command: |
            IP=$(curl -H "token: << pipeline.parameters.memstash_id >>" --request GET https://api.memstash.io/values/ip) 
            export API_URL="http://${IP}:3030"
            echo API_URL="http://${IP}:3030" > "frontend/.env"
            echo "${API_URL}"
      - run:
          name: Build Frontend
          command: |
            cd frontend
            cat frontend/.env
            npm run build
            ls -lR dist
      - run:
          name: Add aws-cli
          command: |
            sudo apt-get update
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
            npm install webpack-dev-server -g
      - revert-migrations
      - destroy-environment      
                    
  deploy-backend:
    docker:
      - image: circleci/python:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1b:44:51:30:00:83:58:cd:fd:f8:bf:c3:9f:f2:82:e2"]
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install dependencies
          command: |
            python -m pip install ansible
            sudo apt install npm nodejs
            pip install awscli
      - run:
          name: install openssh
          command: |
            apk add openssh-client
      - run:
          name: create .env files
          command: |
            echo NODE_ENV=production > "backend/.env"
            echo VERSION=1 >> "backend/.env"
            echo ENVIROMENT=development >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            tar cvzf backend.tar.gz backend
            cd backend
            ls -ahl
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            echo $(curl -H "token: << pipeline.parameters.memstash_id >>" \
             --request GET https://api.memstash.io/values/ip) >> ~/project/.circleci/ansible/inventory.txt 
            ansible-playbook -i inventory.txt deploy-backend.yml --ssh-common-args='-o StrictHostKeyChecking=no'
       # Rollback on failure  
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            IP=$(curl -H "token: << pipeline.parameters.memstash_id >>" \
                        --request GET https://api.memstash.io/values/backend_ip)
            echo "export API_URL="http://${IP}:3030" >> "frontend/.env"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |  
            backendURL=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend" \
            --output text) 
            echo "export URL=http://${backendURL}:3030/api/status" >> backend/.env
            echo $URL
            curl $URL
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            echo $URL
            curl --connect-timeout 10 -s $URL
            retval=$?

            echo $retval

            if [ $retval -eq 0 ]
            then
               echo "Backend OK"
               exit 0
            else
               echo "Backend Fail"
               exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo $FRONTEND_URL
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
            return 0
            echo "SUCCESS - deployed successfully (front end)"
            else
            return 1
            echo "FAIL - deployed failed (front end)"
            fi
      - run:
          name: Install aws-cli
          when: on_fail
          command: |
            sudo apt-get update
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Retrieve old stack workflow ID 
          command: |
            aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --region us-east-1 --no-paginate --output text >> ./.circleci/previousWorkFlowID.txt
            cat ./.circleci/previousWorkFlowID.txt
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/previousWorkFlowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            pwd
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
            --region us-east-1
            --tags project=udapeople
      - revert-migrations
      - destroy-environment

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo "${OldWorkflowID}"
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo "${STACKS}"            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]; then
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
         requires: [deploy-infrastructure]
      - deploy-backend:
          requires: [deploy-infrastructure]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]