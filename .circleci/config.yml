version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: empty the S3 bucket
          command: |
            if aws s3api head-bucket --bucket udapeople-s3bucket-${CIRCLE_WORKFLOW_ID}
            then
              aws s3 rm s3://udapeople-s3bucket-${CIRCLE_WORKFLOW_ID}/ --recursive
            fi
          when: on_fail
      - run:
          name: Delete CloudFormation stacks
          command: |
            if aws cloudformation wait stack-exists --stack-name udapeople-cloudfront
            then 
              aws cloudformation delete-stack --stack-name udapeople-cloudfront
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            then 
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            then
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            fi
          when: on_fail

  revert-migration:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Get the public DNS of EC2 instance from https://memstash.io/
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_DNS} >> ./inventory
            cat ./inventory
          when: on_fail
      - add_ssh_keys:
          fingerprints: ["1b:44:51:30:00:83:58:cd:fd:f8:bf:c3:9f:f2:82:e2"] # get it from CircleCI -> Project Settings -> SSH Keys -> Additional SSH Keys
      - run:
          name: Revert the last migration
          command: |
            printenv >> ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory db_rollback.yml
          when: on_fail

parameters:
  circleci_image:
    type: string
    default: circleci/node:latest
  py_alp_image:
    type: string
    default: python:3.7-alpine3.11

jobs:
  build-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Compile the code
          command: |
            cd frontend
            sudo npm install --save-dev html-webpack-plugin@3
            sudo npm install -g webpack
            sudo npm install webpack
            sudo npm install -g webpack-dev-server
            sudo npm update
            npm run build

  build-backend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Compile the code
          command: |
            cd backend
            npm run build

  test-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Test the code
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Test the code
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: scan the code
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      
  scan-backend:
    docker:
      - image: << pipeline.parameters.circleci_image >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: scan the code
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: deploy frontend infrastructure 
          command: |
            aws cloudformation deploy --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} --template-file .circleci/files/frontend.yml --region ${AWS_DEFAULT_REGION} --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: deploy backend infrastructure 
          command: |
            aws cloudformation deploy --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} --template-file .circleci/files/backend.yml --region ${AWS_DEFAULT_REGION} --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Save EC2 IP to https://memstash.io/
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:Name,Values=udapeople-backend-ec2-*' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo ${PUBLIC_DNS}
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data ${PUBLIC_DNS} https://api.memstash.io/values/public_dns
      - destroy-environment
      

  configure-backend:
    docker:
      - image: << pipeline.parameters.py_alp_image >>
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Get EC2 IP from https://memstash.io/
          command: |
            echo ${CIRCLE_WORKFLOW_ID}
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_DNS} >> ./inventory
            cat ./inventory
      - add_ssh_keys:
          fingerprints: ["1b:44:51:30:00:83:58:cd:fd:f8:bf:c3:9f:f2:82:e2"]
      - run:
          name: Configure server via ansible to deploy the backend
          command: |
            printenv >> ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory deploy.yml
      - revert-migration
      - destroy-environment
      

  configure-frontend:
    docker:
      - image: << pipeline.parameters.py_alp_image >>
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
      - run:
          name: Build the frontend
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            export API_URL="http://${PUBLIC_DNS}:3030"
            echo API_URL=${API_URL}
            cd frontend
            npm install --save-dev html-webpack-plugin@3
            npm install -g webpack
            npm install webpack
            npm install -g webpack-dev-server
            npm update
            npm run buildit
      - run: 
          name: Copy files to S3
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-s3bucket-${CIRCLE_WORKFLOW_ID}/ --recursive
      - destroy-environment
      

  smoke-test:
    docker:
      - image: << pipeline.parameters.py_alp_image >>
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Smoke test on frontend
          command: |
            URL="https://udapeople-s3bucket-${CIRCLE_WORKFLOW_ID}.s3.amazonaws.com/index.html"
            echo "${URL}"
            curl -s ${URL}
      - run:
          name: Smoke test on backend
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            curl -s "http://${PUBLIC_DNS}:9100"
      
  delete-old-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Promote the new deployment and delete the old one
          command: |
            OLD_CIRCLE_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='CircleCI-WorkflowID'].Value" --output text)
            echo OLD_CIRCLE_WORKFLOW_ID=${OLD_CIRCLE_WORKFLOW_ID}
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
            echo STACKS=${STACKS}
            echo "Create/Update CloudFront"
            aws cloudformation deploy \
              --stack-name udapeople-cloudfront \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
            echo "Delete old infrastructure"
            if [ -n "${OLD_CIRCLE_WORKFLOW_ID}" ] && [[ "${STACKS[@]}" =~ "${OLD_CIRCLE_WORKFLOW_ID}" ]]
            then
              echo deleting all files at S3 bucket udapeople-s3bucket-${OLD_CIRCLE_WORKFLOW_ID}
              aws s3 rm s3://udapeople-s3bucket-${OLD_CIRCLE_WORKFLOW_ID}/ --recursive
              echo deleting stack udapeople-frontend-${OLD_CIRCLE_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OLD_CIRCLE_WORKFLOW_ID}
              echo deleting stack udapeople-backend-${OLD_CIRCLE_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name udapeople-backend-${OLD_CIRCLE_WORKFLOW_ID}
            fi
      - destroy-environment
      

workflows:
  frontend:
    jobs:
      - build-frontend:
          filters:
            branches:
              ignore: master
      - test-frontend:
          requires:
            - build-frontend
          filters:
            branches:
              ignore: master
      - scan-frontend:
          requires:
            - test-frontend
          filters:
            branches:
              ignore: master
  backend:
    jobs:
      - build-backend:
          filters:
            branches:
              ignore: master
      - test-backend:
          requires:
            - build-backend
          filters:
            branches:
              ignore: master
      - scan-backend:
          requires:
            - test-backend
          filters:
            branches:
              ignore: master
  deploy:
    jobs:
      - deploy-infrastructure:
          filters:
            branches:
              only: master
      - configure-backend:
          requires:
            - deploy-infrastructure
          filters:
            branches:
              only: master
      - configure-frontend:
          requires:
            - configure-backend
          filters:
            branches:
              only: master
      - smoke-test:
          requires:
            - configure-frontend
          filters:
            branches:
              only: master
      - delete-old-infrastructure:
          requires:
            - smoke-test
          filters:
            branches:
              only: master